<?php defined('SYSPATH') or die('No direct script access.');

/**
 * This is the main request registry class.
 * Holds $_GET, $_POST, and $_SERVER vars that are relevent
 * to application.
 * 
 * @package Registry
 * @author Andrew Perlitch
 */
class RequestRegistry {
	
	/**
	 * Request method property.
	 * Should be from $_SERVER['REQUEST_METHOD'].
	 *
	 * @var string
	 */
	protected $method = null;
	
	/**
	 * Whether or not this request is AJAX.
	 *
	 * @var bool
	 */
	protected $isAjax = false;
	
	/**
	 * User agent string from $_SERVER
	 *
	 * @var string
	 */
	protected $agent = null;
	
	/**
	 * IP address of client
	 *
	 * @var string
	 */
	protected $addr = null;
	
	/**
	 * Request URI
	 *
	 * @var string
	 */
	protected $uri = null;
	
	/**
	 * $_GET array
	 *
	 * @var array
	 */
	protected $get = array();
	
	/**
	 * $_POST array
	 *
	 * @var string
	 */
	protected $post = array();
	
	/**
	 * Parameters parsed from URI and routes
	 * @see CommandResolver
	 * @var array
	 */
	protected $uri_params = array();
	
	
	/**
	 * Constructs request object.
	 * 
	 * @param array $server     $_SERVER
	 * @param array $get        $_GET
	 * @param array $post       $_POST
	 * @author Andrew Perlitch
	 */
	function __construct( array $server, array $get, array $post )
	{
		// check that server array is as expected
		if( ! isset($server['REQUEST_METHOD']) ) throw new RegistryException("\$_SERVER array not valid.");
		// set method
		$this->method = $server['REQUEST_METHOD'];
		// set ajax
		$this->isAjax = isset($server['HTTP_X_REQUESTED_WITH']) && $server['HTTP_X_REQUESTED_WITH'] == 'xmlhttprequest';
		// set agent
		$this->agent = $server['HTTP_USER_AGENT'];
		// set IP
		$this->addr = $server['REMOTE_ADDR'];
		// set uri
		$this->uri = $server['REQUEST_URI'];
		// $_GET
		$this->get = $get;
		// $_POST
		$this->post = $post;
	}
	
	/**
	 * Returns true if an AJAX request, false if not
	 *
	 * @return bool
	 * @author Andrew Perlitch
	 */
	public function isAjax()
	{
		return $this->isAjax;
	}
	
	/**
	 * Returns request method
	 *
	 * @return string
	 * @author Andrew Perlitch
	 */
	public function method()
	{
		return $this->method;
	}
	
	/**
	 * Returns _GET array or _GET[key]
	 *
	 * @param string $key    key of element to retrieve
	 * @return mixed
	 * @author Andrew Perlitch
	 */
	public function get($key = null)
	{
		if ( $key === null ) return $this->get;
		if ( array_key_exists($key, $this->get) ) return $this->get[$key];
		throw new RegistryException("\$key [$key] not found in \$get array.");
	}
	
	/**
	 * Returns _POST array or _POST[key]
	 *
	 * @param string $key 
	 * @return mixed
	 * @author Andrew Perlitch
	 */
	public function post($key = null)
	{
		if ( $key === null ) return $this->post;
		if ( array_key_exists($key, $this->post) ) return $this->post[$key];
		throw new RegistryException("\$key [$key] not found in \$post array.");
	}
	
	/**
	 * Returns agent string
	 *
	 * @return string
	 * @author Andrew Perlitch
	 */
	public function agent()
	{
		return $this->agent;
	}
	
	/**
	 * Returns IP address of client
	 *
	 * @return string
	 * @author Andrew Perlitch
	 */
	public function addr()
	{
		return $this->addr;
	}
	
	/**
	 * Returns URI of request
	 *
	 * @return string
	 * @author Andrew Perlitch
	 */
	public function uri()
	{
		return $this->uri;
	}
	
	/**
	 * Returns value from uri_params[$key]
	 *
	 * @param string $key 
	 * @return string
	 * @author Andrew Perlitch
	 */
	public function param($key)
	{
		if(array_key_exists($key, $this->uri_params)) return $this->uri_params[$key];
		return NULL;
	}

	/**
	 * Accept new array of params.
	 * Should be generated by CommandResolver
	 *
	 * @see  CommandResolver
	 * @param array $params 
	 * @return void
	 * @author Andrew Perlitch
	 */
	public function acceptParams(array $params)
	{
		$this->uri_params = $params;
	}
}